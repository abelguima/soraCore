/*
 * Copyright (c) 2015 United States Government as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 */

#include "Message.idl"

/**
 * \file
 *
 * \brief TrackedObjectConfig
 *
 * \ingroup idlfiles
 */
module rapid {
  module ext {
    module arc {

    //@copy-c-declaration class TrackedObjectConfigTypeSupport;
    //@copy-c-declaration class TrackedObjectConfigDataWriter;
    //@copy-c-declaration class TrackedObjectConfigDataReader;
    //@copy-c-declaration struct TrackedObjectConfigSeq;

    //@copy-declaration /** TrackedObjectConfig  */
    valuetype TrackedObjectConfig : Message {

        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef TrackedObjectConfigTypeSupport TypeSupport;
        //@copy-c-declaration typedef TrackedObjectConfigDataWriter DataWriter;
        //@copy-c-declaration typedef TrackedObjectConfigDataReader DataReader;
        //@copy-c-declaration typedef TrackedObjectConfigSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef TrackedObjectConfig Type;

        //@copy-declaration /** Specifies the interpretation of the rotation field in TrackedObjectSample.pose 
        //@copy-declaration  * @see RotationEncoding */
        public RotationEncoding   poseEncoding;
        //@copy-declaration /** Specifies the interpretation of the rotation field in TrackedObjectSample.velocity
        //@copy-declaration  * @see RotationEncoding */
        public RotationEncoding   velocityEncoding;

        //@copy-declaration /** Labels for possible classifications */
        public String16Sequence32 classifications;
        
        //@copy-declaration /** Holds extra Agent-specific information about object samples. */
        public KeyTypeValueSequence64 valueKeys;
    };

    const long TRACKEDOBJECT_BOUND_BOX      = 0;
    const long TRACKEDOBJECT_BOUND_CYLINDER = 1;
    const long TRACKEDOBJECT_BOUND_SPHERE   = 2;
    
    };
  };
};
